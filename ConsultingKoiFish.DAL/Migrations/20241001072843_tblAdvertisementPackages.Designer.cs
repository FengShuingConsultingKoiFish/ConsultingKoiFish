// <auto-generated />
using System;
using ConsultingKoiFish.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsultingKoiFish.DAL.Migrations
{
    [DbContext(typeof(ConsultingKoiFishContext))]
    [Migration("20241001072843_tblAdvertisementPackages")]
    partial class tblAdvertisementPackages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.AdAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AdAttributes", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.AdImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("ImageId");

                    b.ToTable("AdImages", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.AdvertisementPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AdvertisementPackages", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUser", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.BlogImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ImageId");

                    b.ToTable("BlogImages", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KoiCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KoiCategoryId");

                    b.ToTable("KoiBreeds", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiBreedZodiac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KoiBreedId")
                        .HasColumnType("int");

                    b.Property<int>("ZodiacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KoiBreedId");

                    b.HasIndex("ZodiacId");

                    b.ToTable("KoiBreedZodiacs", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KoiCategories", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Pond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PondCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PondCategoryId");

                    b.ToTable("Ponds", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PondCategories", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KoiBreedId")
                        .HasColumnType("int");

                    b.Property<int>("PondId")
                        .HasColumnType("int");

                    b.Property<int>("UserPondId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KoiBreedId");

                    b.HasIndex("PondId");

                    b.HasIndex("UserPondId");

                    b.ToTable("PondDetails", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondZodiac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PondId")
                        .HasColumnType("int");

                    b.Property<int>("ZodiacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.HasIndex("ZodiacId");

                    b.ToTable("PondZodiacs", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserPond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PondName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("ScoreDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPonds", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserZodiac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ZodiacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("ZodiacId");

                    b.ToTable("UserZodiacs", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Zodiac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ZodiacName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Zodiacs", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "dbo");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.AdAttribute", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.Advertisement", "Advertisement")
                        .WithMany("AdAttributes")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.AdImage", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.Advertisement", "Advertisement")
                        .WithMany("AdImages")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Image", "Image")
                        .WithMany("AdImages")
                        .HasForeignKey("ImageId")
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Advertisement", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Blog", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.BlogImage", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Image", "Image")
                        .WithMany("BlogImages")
                        .HasForeignKey("ImageId")
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Comment", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.Advertisement", "Advertisement")
                        .WithMany("Comments")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Image", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiBreed", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.KoiCategory", "KoiCategory")
                        .WithMany("KoiBreeds")
                        .HasForeignKey("KoiCategoryId")
                        .IsRequired();

                    b.Navigation("KoiCategory");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiBreedZodiac", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.KoiBreed", "KoiBreed")
                        .WithMany("KoiBreedZodiacs")
                        .HasForeignKey("KoiBreedId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Zodiac", "Zodiac")
                        .WithMany("KoiBreedZodiacs")
                        .HasForeignKey("ZodiacId")
                        .IsRequired();

                    b.Navigation("KoiBreed");

                    b.Navigation("Zodiac");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Pond", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.PondCategory", "PondCategory")
                        .WithMany("Ponds")
                        .HasForeignKey("PondCategoryId")
                        .IsRequired();

                    b.Navigation("PondCategory");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondDetail", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.KoiBreed", "KoiBreed")
                        .WithMany("PondDetails")
                        .HasForeignKey("KoiBreedId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Pond", "Pond")
                        .WithMany("PondDetails")
                        .HasForeignKey("PondId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.UserPond", "UserPond")
                        .WithMany("PondDetails")
                        .HasForeignKey("UserPondId")
                        .IsRequired();

                    b.Navigation("KoiBreed");

                    b.Navigation("Pond");

                    b.Navigation("UserPond");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondZodiac", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.Pond", "Pond")
                        .WithMany("PondZodiacs")
                        .HasForeignKey("PondId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Zodiac", "Zodiac")
                        .WithMany("PondZodiacs")
                        .HasForeignKey("ZodiacId")
                        .IsRequired();

                    b.Navigation("Pond");

                    b.Navigation("Zodiac");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("ConsultingKoiFish.DAL.Entities.RefreshToken", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_ApplicationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserDetail", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("ConsultingKoiFish.DAL.Entities.UserDetail", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDetail_ApplicationUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserPond", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithMany("UserPonds")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserZodiac", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", "User")
                        .WithOne("UserZodiac")
                        .HasForeignKey("ConsultingKoiFish.DAL.Entities.UserZodiac", "UserId")
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.Zodiac", "Zodiac")
                        .WithMany("UserZodiacs")
                        .HasForeignKey("ZodiacId")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Zodiac");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConsultingKoiFish.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Advertisement", b =>
                {
                    b.Navigation("AdAttributes");

                    b.Navigation("AdImages");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("UserDetail")
                        .IsRequired();

                    b.Navigation("UserPonds");

                    b.Navigation("UserZodiac")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Blog", b =>
                {
                    b.Navigation("BlogImages");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Image", b =>
                {
                    b.Navigation("AdImages");

                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiBreed", b =>
                {
                    b.Navigation("KoiBreedZodiacs");

                    b.Navigation("PondDetails");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.KoiCategory", b =>
                {
                    b.Navigation("KoiBreeds");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Pond", b =>
                {
                    b.Navigation("PondDetails");

                    b.Navigation("PondZodiacs");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.PondCategory", b =>
                {
                    b.Navigation("Ponds");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.UserPond", b =>
                {
                    b.Navigation("PondDetails");
                });

            modelBuilder.Entity("ConsultingKoiFish.DAL.Entities.Zodiac", b =>
                {
                    b.Navigation("KoiBreedZodiacs");

                    b.Navigation("PondZodiacs");

                    b.Navigation("UserZodiacs");
                });
#pragma warning restore 612, 618
        }
    }
}
